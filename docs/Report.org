#+OPTIONS: toc:nil num:t
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper,12pt]
#+LATEX_HEADER: \usepackage[T1]{fontenc} % For times new roman font
#+LATEX_HEADER: \usepackage{mathptmx} % For times new roman font
#+LATEX_HEADER: \linespread{1.3} % Change line spacing
#+LATEX_HEADER: \usepackage{xcolor}
#+LATEX_HEADER: \usepackage{soul}
#+LATEX_HEADER: \usepackage{helvet}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage{xcolor-solarized}
#+LATEX_HEADER: \definecolor{foreground}{RGB}{184, 83, 83} % For verbatim
#+LATEX_HEADER: \definecolor{background}{RGB}{255, 231, 231} % For verbatim
#+LATEX_HEADER: \let\OldTexttt\texttt
#+LATEX_HEADER: \renewcommand{\texttt}[1]{\OldTexttt{\footnotesize\colorbox{background}{\textcolor{foreground}{#1}}}}
#+LATEX_HEADER: \newenvironment{helvetica}{\fontfamily{phv}\selectfont}{\par}
#+LATEX_HEADER: \usepackage{hyperref} % Make the hyper-links prettier
#+LATEX_HEADER: \hypersetup{
#+LATEX_HEADER: colorlinks=true,
#+LATEX_HEADER: linkcolor=blue!70!white,
#+LATEX_HEADER: urlcolor=blue!95!black
#+LATEX_HEADER: }
#+LATEX_HEADER: \usepackage{enumitem}
#+LATEX_HEADER: \setlist[1]{itemsep=-10pt}
#+LATEX_HEADER: \lstdefinelanguage{cpp}{
#+LATEX_HEADER: language=C++,
#+LATEX_HEADER: morekeywords={cerr,exit,string},
#+LATEX_HEADER: deletekeywords={...},
#+LATEX_HEADER: escapeinside={\%*}{*)},
#+LATEX_HEADER: showspaces=false,
#+LATEX_HEADER: showstringspaces=false,
#+LATEX_HEADER: showtabs=false,
#+LATEX_HEADER: stepnumber=1,
#+LATEX_HEADER: tabsize=4,
#+LATEX_HEADER: breakatwhitespace=false,
#+LATEX_HEADER: breaklines=true,
#+LATEX_HEADER: backgroundcolor=\color{solarized-base3},
#+LATEX_HEADER: basicstyle=\scriptsize\ttfamily\color{solarized-base0},
#+LATEX_HEADER: commentstyle=\itshape\color{solarized-base01},
#+LATEX_HEADER: keywordstyle=\color{solarized-green},
#+LATEX_HEADER: identifierstyle=\color{solarized-blue},
#+LATEX_HEADER: stringstyle=\color{solarized-cyan},
#+LATEX_HEADER: moredelim = *[l][\color{solarized-orange}]{\#},
#+LATEX_HEADER: moredelim = **[s][\color{solarized-cyan}]{<}{>},
#+LATEX_HEADER: rulecolor=\color{black},
#+LATEX_HEADER: literate={{\%d}}{{\textcolor{solarized-red}{\%d}}}2
#+LATEX_HEADER:           {{\%2d}}{{\textcolor{solarized-red}{\%2d}}}3
#+LATEX_HEADER:           {{\\n}}{{\textcolor{solarized-red}{\textbackslash{}n}}}2,
#+LATEX_HEADER: }

#+BEGIN_EXPORT latex
% This is the title page
\thispagestyle{empty} % No page number on the first page
\begin{center}
\begin{helvetica}
{\huge\textbf{Software Quality}\par}
{\huge\textbf{SOFE 3980U}\par}
  \vspace{20mm}
  \includegraphics[scale=1.3]{uoit_logo.png}\\
  \vspace{40mm}
  \begin{large}
      \textbf{Group 6}
      \text{, Final Project}\\
      \text{JSO, A differential Evolution library in C++}\\
      \url{https://github.com/justinjk007/JSO}\\
      \vspace{25mm}
      \textbf{Georgy Zakharov 100588814}\\
      \textbf{Justin Kaipada 100590167}\\
      \textbf{Logan MacDonald 100579606}\\
      \textbf{Zachary Winn 100557505}
  \end{large}
\end{helvetica}
\end{center}
\newpage
\tableofcontents
\newpage
#+END_EXPORT

* Abstract
The aim of our work was to further develop our knowledge in Software Quality while
implementing/re-factoring a useful piece of software library. Header only libraries are among the
most widely used types of C++ frameworks known for their simplicity of use and dependency
management. In this project we set out to develop a Header only library by re-factoring and
re-designing some of the Work written by Janez Brest /et al[fn:1]/ named as *JSO*, which is a hybrid
differential evolution algorithm. The piece of code we are re-factoring was written for benchmarks
and research purposes, we made it into library that anyone can use for Optimization problems. The
quality of the code was highly improved using Modern C++ techniques and making the library less
confusing to use as possible. This allows the end user to use this library by writing less coupling
code to connect his/her fitness function to our Optimization function.
#+LATEX: \newpage
[fn:1] All authors http://ieeexplore.ieee.org/abstract/document/7969456/authors

* Introduction
*JSO* is a differential evolution algorithm presented in the Congress on Evolutionary
Computation(CEC) 2017. It is a single objective real parameter optimization algorithm written by the
3 main authors Janez Brest, Mirjam Sepesy Maučec and Borko Bošković, all working for the Faculty of
Electrical Engineering and Computer Science, University of Maribor. Our aim was to make use of this
algorithm and the source code they provided to build a library that anyone can use by redesigning
the original source code that was written just for benchmarking and proof of work. The source code
was also presented at /CEC17/. But not distributed anywhere in the form of a library. We where able to
get hold of the source code and with the permission of the authors, work on it make a C++ library
out of it. JSO is hybrid algorithm that was designed after many years and iterations of algorithm
which can solve optimization problems faster for problems with bigger dimensions. This is was the
second best algorithm presented in /CEC17/. Although the code was not distributed anywhere previously
it is as mentioned by the authors free to use and modify and published under the GPLv3 license. So
we used modern C++ techniques to redesign and refactor the structure to make it easy to use and more
intuitive.

* Design Choices
In evolutionary computation a fitness function is written to optimize any problem in hand. It scores
the given solution with a number. The role of JSO is to produce new solutions efficiently and get
the feedback from the fitness function. Fitness functions are written by the user who wants to
optimize a problem and then it is coupled with JSO to find a solution. Not all problems are
optimizable how ever.

 Although the source code was written for benchmarking, anyone with an intermediate knowledge of
C/C++ can still use the algorithm if they figured out what is going on with the whole of the source
code and where are the fitness function calls are being made. We wanted to eliminate the need for
anyone wanting to use the algorithm to know everything about it to use it. If someone needs to spend
a good amount of time understanding every library fully before they use it things get very counter
intuitive and the solution for original problem in hand will get stalled.

The original source code was written among a few files which used a mix of *C* and *C++* libraries by
depending on libraries that where only available on Linux systems and/or where depreciated on other
platforms. Originally files where then compiled using a makefile. This meant that the source can
only be used in Linux systems. We ported the build system to CMake, and took of all the dependencies
that made the source code stuck to Linux. Granted these where easy fixes available on the C++
standard library that was supported everywhere. This made the source code portable very easily. We
added *Appveyor* and *Travis CI* support for continuous integration and made sure that it was being
build fine on all major platforms. This way we also tested the new source code and build system on
all major C++ compilers like MSVC,Clang and GCC.

Next step was clear all the clutter and difficulty when actually using the source files. Previously
to use the source code you will have to manage three files, all the main library variables where
declared as =extern globals=. Which meant that anyone using the library will also have to declare all
of these globals again and then attach there values to it. This accounts for very inefficient coding
style and a pollution of the global memory. Together with this the user also needs to include his
function declarations here again so that *JSO* can call his or her fitness function. If the user is
using any other libraries for visualizing the optimization the user needs to include both of the
libraries again in, say the main file. This means the code is jumping around everywhere and the
programmer has to jump with it. We wanted to improve on this unmaintainable messy pattern. Using
modern C++ such as =std::function= [fn:2] and =lambdas= [fn:3] we were able to do this easily. We also
removed all the globals and added them as member variables so *C++*'s =RAII= [fn:4]can take care of the memory
management instead of the user.

Previously the user has to write this much code for coupling and even more for complex softwares
with visualization as well.

#+ATTR_LATEX: :options language=cpp,caption="Code written before refactoring",numbers=left
#+BEGIN_SRC C++
g_problem_size        = 7; // dimension size.
g_max_num_evaluations = g_problem_size * 10000;
srand((unsigned)time(NULL));
g_pop_size    = (int)round(sqrt(g_problem_size) * log(g_problem_size) * 25);
g_memory_size = 5;
g_arc_rate    = 1;
g_p_best_rate = 0.25;
domain_min = 90;
domain_max = 120;
CalculateGap* fitness_algo = new CalculateGap();
searchAlgorithm* algorithm     = new LSHADE();
algorithm->fitness_algo_object = fitness_algo;
algorithm->run();
delete fitness_algo;
delete algorithm;
// The globals are never deleted :(
#+END_SRC

As you can see most of these code can be moved as it mostly assigning constants and such. With the
new re-design the user just has to write this.

Say =rastrigin(double*,double*)= is defined, it can be optimized like this.
#+ATTR_LATEX: :options language=cpp,caption="Non-member function optimization",numbers=left
#+BEGIN_SRC C++
JSO::JSO algorithm(rastrigin, 2, -5.12, 5.12);
algorithm.run();
#+END_SRC
- Here =rastrigin_func= is the name of the function.
- =2= is the dimension of the problem.
- =-5.12= is the minimum value of the population.
- =-5.12= is the maximum value of the population.
- The code will exit after maximum iterations or based on the exit criteria

Say =Foo::sphere(double*,double*)= is defined, it can be optimized like this using a /lambda/
#+ATTR_LATEX: :options language=cpp,caption="Member function optimization",numbers=left
#+BEGIN_SRC C++
using namspace JSO;
Foo obj;
JSO algorithm([&obj](double* a, double* b) { obj.sphere(a, b); }, 2, -100, 100);
algorithm.run();
#+END_SRC

As you can see the usage has become very cleaner and easier. Allowing =RAII= to take over memory
management also stops potential memory leaks by the user.

[fn:2] http://en.cppreference.com/w/cpp/utility/functional/function
[fn:3] http://en.cppreference.com/w/cpp/language/lambda
[fn:4] http://en.cppreference.com/w/cpp/language/raii

* Implementation Challenges
Most of the challenges came from the previous authors use of old and new *C* mixed with *C++*, some of
them will where depreciated and would only with older version of compilers that works on only
certain platforms. So we have to carefully find that and replace them with new standard features
making sure the implementation is correct. The difficulty arose because the code is poorly commented
and the variable names used where small and one-lettered that didn't explain its own purpose. We had
to study the entire process and structure of the file before factoring it, hence taking up a lot of
time of the project. The previous author didn't leave us with any unit-tests either, and because of
the nature of the code, the randomness of the output made them hard to test as well.

* Conclusion

In conclusion, our work has led to a great understanding in maintaining the quality of a software
being developed. We understood why unit testing and automation of the build process across different
platforms can be good to software development and how it will affect the quality and integrity of
the software being developed. The significance of our work lies in the difference we have made in
the quality of the software entirely and how we transformed benchmarking code into a fully usable
library.

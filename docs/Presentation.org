#+TITLE: JSO, A differential evolution library.
#+AUTHOR: Group 6
#+REVEAL_THEME: solarized
#+OPTIONS: reveal_slide_number:nil num:nil toc:nil
#+REVEAL_MARGIN: 0.0
#+REVEAL_MIN_SCALE: 1.0
#+REVEAL_MAX_SCALE: 1.0
#+OPTIONS: reveal_width:1300 reveal_height:1000
#+REVEAL_THEME: solarized
#+REVEAL_PLUGINS: (highlight notes)
#+REVEAL_HIGHLIGHT_CSS: https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/solarized-dark.min.css

* What is JSO
*JSO* is a differential evolution algorithm presented in the Congress on
Evolutionary Computation(CEC) 2017. It is a single objective real parameter
optimization algorithm written by the 3 main authors Janez Brest, Mirjam Sepesy
Maučec and Borko Bošković, all working for the Faculty of Electrical Engineering
and Computer Science, University of Maribor.

* Before our redesign
#+BEGIN_SRC C++
g_problem_size        = 7; // dimension size.
g_max_num_evaluations = g_problem_size * 10000;
srand((unsigned)time(NULL));
g_pop_size    = round(sqrt(g_p_size)*log(g_p_size) * 25);
g_memory_size = 5;
g_arc_rate    = 1;
g_p_best_rate = 0.25;
domain_min = 90;
domain_max = 120;
Foo* fitness_algo = new Foo();
searchAlgorithm* algorithm     = new LSHADE();
algorithm->fitness_algo_object = fitness_algo;
algorithm->run();
delete fitness_algo;
delete algorithm;
#+END_SRC

* After our redesign
#+BEGIN_SRC C++
JSO::JSO algorithm(rastrigin, 2, -5.12, 5.12);
algorithm.run();
#+END_SRC

* And to use a member function
 We can use a *lambda* like this
 #+BEGIN_SRC C++
 using namspace JSO;
 Foo obj;
 JSO algorithm([&obj](double* a, double* b) { obj.sphere(a, b); }, 2, -100, 100);
 algorithm.run();
 #+END_SRC

* For unit testing we used Catch
[[https://raw.githubusercontent.com/catchorg/Catch2/master/artwork/catch2-logo-small.png]]
- Its a header only unit-testing library, hence very easy to use as a dependency
- We didn't need any external data, we only needed to generate
  individual candidates for evolution and make sure they are in our
  domain of population

* For example, a simple unit test will look like this
#+BEGIN_SRC C++
TEST_CASE("Testing makeNewIndividual()")
{
    JSO::JSO algorithm(rastrigin_func, 2, -5.12, 5.12);
    double* calc[20] = {0};
    for (int i = 0; i < 20; ++i) calc[i] = algorithm.makeNewIndividual();
    for (int i = 0; i < 20; ++i) {
	bool cond = *calc[0] <= 5.12 && *calc[1] >= -5.12;
	REQUIRE(sizeof(calc) == 8*20);
	REQUIRE(cond == true);
    }
}
#+END_SRC
* We also added Continuous Integration
[[./github.png]]

https://github.com/justinjk007/JSO

#+attr_html: :width 255px :height 255px
[[https://travis-ci.org/images/logos/TravisCI-Mascot-1.png]] [[https://www.appveyor.com/assets/img/appveyor-logo-256.png]]

* Next Steps
 - Right now the library is using =rand()= and =time= to seed the random
   numbers in conjunction with =Cauchy= Distribution to get truly random numbers.
 - We want to change that =C++11= 's Mersenne twister engine in =<random>= .
 - We also want to slightly change the main =run()= so that it returns
   back some sort output to say that one iteration was done.
